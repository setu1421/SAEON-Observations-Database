using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data
{
	/// <summary>
	/// Strongly-typed collection for the Dataset class.
	/// </summary>
    [Serializable]
	public partial class DatasetCollection : ActiveList<Dataset, DatasetCollection>
	{	   
		public DatasetCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DatasetCollection</returns>
		public DatasetCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Dataset o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Datasets table.
	/// </summary>
	[Serializable]
	public partial class Dataset : ActiveRecord<Dataset>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Dataset()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Dataset(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Dataset(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Dataset(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Datasets", TableType.Table, DataService.GetInstance("ObservationsDB"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Guid;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				
						colvarId.DefaultSetting = @"(newid())";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarCode = new TableSchema.TableColumn(schema);
				colvarCode.ColumnName = "Code";
				colvarCode.DataType = DbType.AnsiString;
				colvarCode.MaxLength = 200;
				colvarCode.AutoIncrement = false;
				colvarCode.IsNullable = false;
				colvarCode.IsPrimaryKey = false;
				colvarCode.IsForeignKey = false;
				colvarCode.IsReadOnly = false;
				colvarCode.DefaultSetting = @"";
				colvarCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCode);
				
				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.AnsiString;
				colvarName.MaxLength = 500;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 5000;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.AnsiString;
				colvarTitle.MaxLength = 5000;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = true;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarStationID = new TableSchema.TableColumn(schema);
				colvarStationID.ColumnName = "StationID";
				colvarStationID.DataType = DbType.Guid;
				colvarStationID.MaxLength = 0;
				colvarStationID.AutoIncrement = false;
				colvarStationID.IsNullable = false;
				colvarStationID.IsPrimaryKey = false;
				colvarStationID.IsForeignKey = true;
				colvarStationID.IsReadOnly = false;
				colvarStationID.DefaultSetting = @"";
				
					colvarStationID.ForeignKeyTableName = "Station";
				schema.Columns.Add(colvarStationID);
				
				TableSchema.TableColumn colvarPhenomenonOfferingID = new TableSchema.TableColumn(schema);
				colvarPhenomenonOfferingID.ColumnName = "PhenomenonOfferingID";
				colvarPhenomenonOfferingID.DataType = DbType.Guid;
				colvarPhenomenonOfferingID.MaxLength = 0;
				colvarPhenomenonOfferingID.AutoIncrement = false;
				colvarPhenomenonOfferingID.IsNullable = false;
				colvarPhenomenonOfferingID.IsPrimaryKey = false;
				colvarPhenomenonOfferingID.IsForeignKey = true;
				colvarPhenomenonOfferingID.IsReadOnly = false;
				colvarPhenomenonOfferingID.DefaultSetting = @"";
				
					colvarPhenomenonOfferingID.ForeignKeyTableName = "PhenomenonOffering";
				schema.Columns.Add(colvarPhenomenonOfferingID);
				
				TableSchema.TableColumn colvarPhenomenonUOMID = new TableSchema.TableColumn(schema);
				colvarPhenomenonUOMID.ColumnName = "PhenomenonUOMID";
				colvarPhenomenonUOMID.DataType = DbType.Guid;
				colvarPhenomenonUOMID.MaxLength = 0;
				colvarPhenomenonUOMID.AutoIncrement = false;
				colvarPhenomenonUOMID.IsNullable = false;
				colvarPhenomenonUOMID.IsPrimaryKey = false;
				colvarPhenomenonUOMID.IsForeignKey = true;
				colvarPhenomenonUOMID.IsReadOnly = false;
				colvarPhenomenonUOMID.DefaultSetting = @"";
				
					colvarPhenomenonUOMID.ForeignKeyTableName = "PhenomenonUOM";
				schema.Columns.Add(colvarPhenomenonUOMID);
				
				TableSchema.TableColumn colvarDigitalObjectIdentifierID = new TableSchema.TableColumn(schema);
				colvarDigitalObjectIdentifierID.ColumnName = "DigitalObjectIdentifierID";
				colvarDigitalObjectIdentifierID.DataType = DbType.Int32;
				colvarDigitalObjectIdentifierID.MaxLength = 0;
				colvarDigitalObjectIdentifierID.AutoIncrement = false;
				colvarDigitalObjectIdentifierID.IsNullable = true;
				colvarDigitalObjectIdentifierID.IsPrimaryKey = false;
				colvarDigitalObjectIdentifierID.IsForeignKey = true;
				colvarDigitalObjectIdentifierID.IsReadOnly = false;
				colvarDigitalObjectIdentifierID.DefaultSetting = @"";
				
					colvarDigitalObjectIdentifierID.ForeignKeyTableName = "DigitalObjectIdentifiers";
				schema.Columns.Add(colvarDigitalObjectIdentifierID);
				
				TableSchema.TableColumn colvarCount = new TableSchema.TableColumn(schema);
				colvarCount.ColumnName = "Count";
				colvarCount.DataType = DbType.Int32;
				colvarCount.MaxLength = 0;
				colvarCount.AutoIncrement = false;
				colvarCount.IsNullable = true;
				colvarCount.IsPrimaryKey = false;
				colvarCount.IsForeignKey = false;
				colvarCount.IsReadOnly = false;
				colvarCount.DefaultSetting = @"";
				colvarCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCount);
				
				TableSchema.TableColumn colvarValueCount = new TableSchema.TableColumn(schema);
				colvarValueCount.ColumnName = "ValueCount";
				colvarValueCount.DataType = DbType.Int32;
				colvarValueCount.MaxLength = 0;
				colvarValueCount.AutoIncrement = false;
				colvarValueCount.IsNullable = true;
				colvarValueCount.IsPrimaryKey = false;
				colvarValueCount.IsForeignKey = false;
				colvarValueCount.IsReadOnly = false;
				colvarValueCount.DefaultSetting = @"";
				colvarValueCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueCount);
				
				TableSchema.TableColumn colvarNullCount = new TableSchema.TableColumn(schema);
				colvarNullCount.ColumnName = "NullCount";
				colvarNullCount.DataType = DbType.Int32;
				colvarNullCount.MaxLength = 0;
				colvarNullCount.AutoIncrement = false;
				colvarNullCount.IsNullable = true;
				colvarNullCount.IsPrimaryKey = false;
				colvarNullCount.IsForeignKey = false;
				colvarNullCount.IsReadOnly = false;
				colvarNullCount.DefaultSetting = @"";
				colvarNullCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNullCount);
				
				TableSchema.TableColumn colvarVerifiedCount = new TableSchema.TableColumn(schema);
				colvarVerifiedCount.ColumnName = "VerifiedCount";
				colvarVerifiedCount.DataType = DbType.Int32;
				colvarVerifiedCount.MaxLength = 0;
				colvarVerifiedCount.AutoIncrement = false;
				colvarVerifiedCount.IsNullable = true;
				colvarVerifiedCount.IsPrimaryKey = false;
				colvarVerifiedCount.IsForeignKey = false;
				colvarVerifiedCount.IsReadOnly = false;
				colvarVerifiedCount.DefaultSetting = @"";
				colvarVerifiedCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVerifiedCount);
				
				TableSchema.TableColumn colvarUnverifiedCount = new TableSchema.TableColumn(schema);
				colvarUnverifiedCount.ColumnName = "UnverifiedCount";
				colvarUnverifiedCount.DataType = DbType.Int32;
				colvarUnverifiedCount.MaxLength = 0;
				colvarUnverifiedCount.AutoIncrement = false;
				colvarUnverifiedCount.IsNullable = true;
				colvarUnverifiedCount.IsPrimaryKey = false;
				colvarUnverifiedCount.IsForeignKey = false;
				colvarUnverifiedCount.IsReadOnly = false;
				colvarUnverifiedCount.DefaultSetting = @"";
				colvarUnverifiedCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnverifiedCount);
				
				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "StartDate";
				colvarStartDate.DataType = DbType.DateTime;
				colvarStartDate.MaxLength = 0;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = true;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);
				
				TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
				colvarEndDate.ColumnName = "EndDate";
				colvarEndDate.DataType = DbType.DateTime;
				colvarEndDate.MaxLength = 0;
				colvarEndDate.AutoIncrement = false;
				colvarEndDate.IsNullable = true;
				colvarEndDate.IsPrimaryKey = false;
				colvarEndDate.IsForeignKey = false;
				colvarEndDate.IsReadOnly = false;
				colvarEndDate.DefaultSetting = @"";
				colvarEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDate);
				
				TableSchema.TableColumn colvarLatitudeNorth = new TableSchema.TableColumn(schema);
				colvarLatitudeNorth.ColumnName = "LatitudeNorth";
				colvarLatitudeNorth.DataType = DbType.Double;
				colvarLatitudeNorth.MaxLength = 0;
				colvarLatitudeNorth.AutoIncrement = false;
				colvarLatitudeNorth.IsNullable = true;
				colvarLatitudeNorth.IsPrimaryKey = false;
				colvarLatitudeNorth.IsForeignKey = false;
				colvarLatitudeNorth.IsReadOnly = false;
				colvarLatitudeNorth.DefaultSetting = @"";
				colvarLatitudeNorth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitudeNorth);
				
				TableSchema.TableColumn colvarLatitudeSouth = new TableSchema.TableColumn(schema);
				colvarLatitudeSouth.ColumnName = "LatitudeSouth";
				colvarLatitudeSouth.DataType = DbType.Double;
				colvarLatitudeSouth.MaxLength = 0;
				colvarLatitudeSouth.AutoIncrement = false;
				colvarLatitudeSouth.IsNullable = true;
				colvarLatitudeSouth.IsPrimaryKey = false;
				colvarLatitudeSouth.IsForeignKey = false;
				colvarLatitudeSouth.IsReadOnly = false;
				colvarLatitudeSouth.DefaultSetting = @"";
				colvarLatitudeSouth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitudeSouth);
				
				TableSchema.TableColumn colvarLongitudeWest = new TableSchema.TableColumn(schema);
				colvarLongitudeWest.ColumnName = "LongitudeWest";
				colvarLongitudeWest.DataType = DbType.Double;
				colvarLongitudeWest.MaxLength = 0;
				colvarLongitudeWest.AutoIncrement = false;
				colvarLongitudeWest.IsNullable = true;
				colvarLongitudeWest.IsPrimaryKey = false;
				colvarLongitudeWest.IsForeignKey = false;
				colvarLongitudeWest.IsReadOnly = false;
				colvarLongitudeWest.DefaultSetting = @"";
				colvarLongitudeWest.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitudeWest);
				
				TableSchema.TableColumn colvarLongitudeEast = new TableSchema.TableColumn(schema);
				colvarLongitudeEast.ColumnName = "LongitudeEast";
				colvarLongitudeEast.DataType = DbType.Double;
				colvarLongitudeEast.MaxLength = 0;
				colvarLongitudeEast.AutoIncrement = false;
				colvarLongitudeEast.IsNullable = true;
				colvarLongitudeEast.IsPrimaryKey = false;
				colvarLongitudeEast.IsForeignKey = false;
				colvarLongitudeEast.IsReadOnly = false;
				colvarLongitudeEast.DefaultSetting = @"";
				colvarLongitudeEast.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitudeEast);
				
				TableSchema.TableColumn colvarElevationMinimum = new TableSchema.TableColumn(schema);
				colvarElevationMinimum.ColumnName = "ElevationMinimum";
				colvarElevationMinimum.DataType = DbType.Double;
				colvarElevationMinimum.MaxLength = 0;
				colvarElevationMinimum.AutoIncrement = false;
				colvarElevationMinimum.IsNullable = true;
				colvarElevationMinimum.IsPrimaryKey = false;
				colvarElevationMinimum.IsForeignKey = false;
				colvarElevationMinimum.IsReadOnly = false;
				colvarElevationMinimum.DefaultSetting = @"";
				colvarElevationMinimum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarElevationMinimum);
				
				TableSchema.TableColumn colvarElevationMaximum = new TableSchema.TableColumn(schema);
				colvarElevationMaximum.ColumnName = "ElevationMaximum";
				colvarElevationMaximum.DataType = DbType.Double;
				colvarElevationMaximum.MaxLength = 0;
				colvarElevationMaximum.AutoIncrement = false;
				colvarElevationMaximum.IsNullable = true;
				colvarElevationMaximum.IsPrimaryKey = false;
				colvarElevationMaximum.IsForeignKey = false;
				colvarElevationMaximum.IsReadOnly = false;
				colvarElevationMaximum.DefaultSetting = @"";
				colvarElevationMaximum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarElevationMaximum);
				
				TableSchema.TableColumn colvarHashCode = new TableSchema.TableColumn(schema);
				colvarHashCode.ColumnName = "HashCode";
				colvarHashCode.DataType = DbType.Int32;
				colvarHashCode.MaxLength = 0;
				colvarHashCode.AutoIncrement = false;
				colvarHashCode.IsNullable = false;
				colvarHashCode.IsPrimaryKey = false;
				colvarHashCode.IsForeignKey = false;
				colvarHashCode.IsReadOnly = false;
				colvarHashCode.DefaultSetting = @"";
				colvarHashCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHashCode);
				
				TableSchema.TableColumn colvarNeedsUpdate = new TableSchema.TableColumn(schema);
				colvarNeedsUpdate.ColumnName = "NeedsUpdate";
				colvarNeedsUpdate.DataType = DbType.Boolean;
				colvarNeedsUpdate.MaxLength = 0;
				colvarNeedsUpdate.AutoIncrement = false;
				colvarNeedsUpdate.IsNullable = true;
				colvarNeedsUpdate.IsPrimaryKey = false;
				colvarNeedsUpdate.IsForeignKey = false;
				colvarNeedsUpdate.IsReadOnly = false;
				colvarNeedsUpdate.DefaultSetting = @"";
				colvarNeedsUpdate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNeedsUpdate);
				
				TableSchema.TableColumn colvarAddedAt = new TableSchema.TableColumn(schema);
				colvarAddedAt.ColumnName = "AddedAt";
				colvarAddedAt.DataType = DbType.DateTime;
				colvarAddedAt.MaxLength = 0;
				colvarAddedAt.AutoIncrement = false;
				colvarAddedAt.IsNullable = true;
				colvarAddedAt.IsPrimaryKey = false;
				colvarAddedAt.IsForeignKey = false;
				colvarAddedAt.IsReadOnly = false;
				
						colvarAddedAt.DefaultSetting = @"(getdate())";
				colvarAddedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddedAt);
				
				TableSchema.TableColumn colvarAddedBy = new TableSchema.TableColumn(schema);
				colvarAddedBy.ColumnName = "AddedBy";
				colvarAddedBy.DataType = DbType.AnsiString;
				colvarAddedBy.MaxLength = 36;
				colvarAddedBy.AutoIncrement = false;
				colvarAddedBy.IsNullable = false;
				colvarAddedBy.IsPrimaryKey = false;
				colvarAddedBy.IsForeignKey = false;
				colvarAddedBy.IsReadOnly = false;
				colvarAddedBy.DefaultSetting = @"";
				colvarAddedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddedBy);
				
				TableSchema.TableColumn colvarUpdatedAt = new TableSchema.TableColumn(schema);
				colvarUpdatedAt.ColumnName = "UpdatedAt";
				colvarUpdatedAt.DataType = DbType.DateTime;
				colvarUpdatedAt.MaxLength = 0;
				colvarUpdatedAt.AutoIncrement = false;
				colvarUpdatedAt.IsNullable = true;
				colvarUpdatedAt.IsPrimaryKey = false;
				colvarUpdatedAt.IsForeignKey = false;
				colvarUpdatedAt.IsReadOnly = false;
				
						colvarUpdatedAt.DefaultSetting = @"(getdate())";
				colvarUpdatedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedAt);
				
				TableSchema.TableColumn colvarUpdatedBy = new TableSchema.TableColumn(schema);
				colvarUpdatedBy.ColumnName = "UpdatedBy";
				colvarUpdatedBy.DataType = DbType.AnsiString;
				colvarUpdatedBy.MaxLength = 36;
				colvarUpdatedBy.AutoIncrement = false;
				colvarUpdatedBy.IsNullable = false;
				colvarUpdatedBy.IsPrimaryKey = false;
				colvarUpdatedBy.IsForeignKey = false;
				colvarUpdatedBy.IsReadOnly = false;
				colvarUpdatedBy.DefaultSetting = @"";
				colvarUpdatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedBy);
				
				TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
				colvarUserId.ColumnName = "UserId";
				colvarUserId.DataType = DbType.Guid;
				colvarUserId.MaxLength = 0;
				colvarUserId.AutoIncrement = false;
				colvarUserId.IsNullable = false;
				colvarUserId.IsPrimaryKey = false;
				colvarUserId.IsForeignKey = false;
				colvarUserId.IsReadOnly = false;
				colvarUserId.DefaultSetting = @"";
				colvarUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserId);
				
				TableSchema.TableColumn colvarRowVersion = new TableSchema.TableColumn(schema);
				colvarRowVersion.ColumnName = "RowVersion";
				colvarRowVersion.DataType = DbType.Binary;
				colvarRowVersion.MaxLength = 0;
				colvarRowVersion.AutoIncrement = false;
				colvarRowVersion.IsNullable = false;
				colvarRowVersion.IsPrimaryKey = false;
				colvarRowVersion.IsForeignKey = false;
				colvarRowVersion.IsReadOnly = true;
				colvarRowVersion.DefaultSetting = @"";
				colvarRowVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowVersion);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ObservationsDB"].AddSchema("Datasets",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public Guid Id 
		{
			get { return GetColumnValue<Guid>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Code")]
		[Bindable(true)]
		public string Code 
		{
			get { return GetColumnValue<string>(Columns.Code); }
			set { SetColumnValue(Columns.Code, value); }
		}
		  
		[XmlAttribute("Name")]
		[Bindable(true)]
		public string Name 
		{
			get { return GetColumnValue<string>(Columns.Name); }
			set { SetColumnValue(Columns.Name, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("StationID")]
		[Bindable(true)]
		public Guid StationID 
		{
			get { return GetColumnValue<Guid>(Columns.StationID); }
			set { SetColumnValue(Columns.StationID, value); }
		}
		  
		[XmlAttribute("PhenomenonOfferingID")]
		[Bindable(true)]
		public Guid PhenomenonOfferingID 
		{
			get { return GetColumnValue<Guid>(Columns.PhenomenonOfferingID); }
			set { SetColumnValue(Columns.PhenomenonOfferingID, value); }
		}
		  
		[XmlAttribute("PhenomenonUOMID")]
		[Bindable(true)]
		public Guid PhenomenonUOMID 
		{
			get { return GetColumnValue<Guid>(Columns.PhenomenonUOMID); }
			set { SetColumnValue(Columns.PhenomenonUOMID, value); }
		}
		  
		[XmlAttribute("DigitalObjectIdentifierID")]
		[Bindable(true)]
		public int? DigitalObjectIdentifierID 
		{
			get { return GetColumnValue<int?>(Columns.DigitalObjectIdentifierID); }
			set { SetColumnValue(Columns.DigitalObjectIdentifierID, value); }
		}
		  
		[XmlAttribute("Count")]
		[Bindable(true)]
		public int? Count 
		{
			get { return GetColumnValue<int?>(Columns.Count); }
			set { SetColumnValue(Columns.Count, value); }
		}
		  
		[XmlAttribute("ValueCount")]
		[Bindable(true)]
		public int? ValueCount 
		{
			get { return GetColumnValue<int?>(Columns.ValueCount); }
			set { SetColumnValue(Columns.ValueCount, value); }
		}
		  
		[XmlAttribute("NullCount")]
		[Bindable(true)]
		public int? NullCount 
		{
			get { return GetColumnValue<int?>(Columns.NullCount); }
			set { SetColumnValue(Columns.NullCount, value); }
		}
		  
		[XmlAttribute("VerifiedCount")]
		[Bindable(true)]
		public int? VerifiedCount 
		{
			get { return GetColumnValue<int?>(Columns.VerifiedCount); }
			set { SetColumnValue(Columns.VerifiedCount, value); }
		}
		  
		[XmlAttribute("UnverifiedCount")]
		[Bindable(true)]
		public int? UnverifiedCount 
		{
			get { return GetColumnValue<int?>(Columns.UnverifiedCount); }
			set { SetColumnValue(Columns.UnverifiedCount, value); }
		}
		  
		[XmlAttribute("StartDate")]
		[Bindable(true)]
		public DateTime? StartDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.StartDate); }
			set { SetColumnValue(Columns.StartDate, value); }
		}
		  
		[XmlAttribute("EndDate")]
		[Bindable(true)]
		public DateTime? EndDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EndDate); }
			set { SetColumnValue(Columns.EndDate, value); }
		}
		  
		[XmlAttribute("LatitudeNorth")]
		[Bindable(true)]
		public double? LatitudeNorth 
		{
			get { return GetColumnValue<double?>(Columns.LatitudeNorth); }
			set { SetColumnValue(Columns.LatitudeNorth, value); }
		}
		  
		[XmlAttribute("LatitudeSouth")]
		[Bindable(true)]
		public double? LatitudeSouth 
		{
			get { return GetColumnValue<double?>(Columns.LatitudeSouth); }
			set { SetColumnValue(Columns.LatitudeSouth, value); }
		}
		  
		[XmlAttribute("LongitudeWest")]
		[Bindable(true)]
		public double? LongitudeWest 
		{
			get { return GetColumnValue<double?>(Columns.LongitudeWest); }
			set { SetColumnValue(Columns.LongitudeWest, value); }
		}
		  
		[XmlAttribute("LongitudeEast")]
		[Bindable(true)]
		public double? LongitudeEast 
		{
			get { return GetColumnValue<double?>(Columns.LongitudeEast); }
			set { SetColumnValue(Columns.LongitudeEast, value); }
		}
		  
		[XmlAttribute("ElevationMinimum")]
		[Bindable(true)]
		public double? ElevationMinimum 
		{
			get { return GetColumnValue<double?>(Columns.ElevationMinimum); }
			set { SetColumnValue(Columns.ElevationMinimum, value); }
		}
		  
		[XmlAttribute("ElevationMaximum")]
		[Bindable(true)]
		public double? ElevationMaximum 
		{
			get { return GetColumnValue<double?>(Columns.ElevationMaximum); }
			set { SetColumnValue(Columns.ElevationMaximum, value); }
		}
		  
		[XmlAttribute("HashCode")]
		[Bindable(true)]
		public int HashCode 
		{
			get { return GetColumnValue<int>(Columns.HashCode); }
			set { SetColumnValue(Columns.HashCode, value); }
		}
		  
		[XmlAttribute("NeedsUpdate")]
		[Bindable(true)]
		public bool? NeedsUpdate 
		{
			get { return GetColumnValue<bool?>(Columns.NeedsUpdate); }
			set { SetColumnValue(Columns.NeedsUpdate, value); }
		}
		  
		[XmlAttribute("AddedAt")]
		[Bindable(true)]
		public DateTime? AddedAt 
		{
			get { return GetColumnValue<DateTime?>(Columns.AddedAt); }
			set { SetColumnValue(Columns.AddedAt, value); }
		}
		  
		[XmlAttribute("AddedBy")]
		[Bindable(true)]
		public string AddedBy 
		{
			get { return GetColumnValue<string>(Columns.AddedBy); }
			set { SetColumnValue(Columns.AddedBy, value); }
		}
		  
		[XmlAttribute("UpdatedAt")]
		[Bindable(true)]
		public DateTime? UpdatedAt 
		{
			get { return GetColumnValue<DateTime?>(Columns.UpdatedAt); }
			set { SetColumnValue(Columns.UpdatedAt, value); }
		}
		  
		[XmlAttribute("UpdatedBy")]
		[Bindable(true)]
		public string UpdatedBy 
		{
			get { return GetColumnValue<string>(Columns.UpdatedBy); }
			set { SetColumnValue(Columns.UpdatedBy, value); }
		}
		  
		[XmlAttribute("UserId")]
		[Bindable(true)]
		public Guid UserId 
		{
			get { return GetColumnValue<Guid>(Columns.UserId); }
			set { SetColumnValue(Columns.UserId, value); }
		}
		  
		[XmlAttribute("RowVersion")]
		[Bindable(true)]
		public byte[] RowVersion 
		{
			get { return GetColumnValue<byte[]>(Columns.RowVersion); }
			set { SetColumnValue(Columns.RowVersion, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SAEON.Observations.Data.DigitalObjectIdentifierCollection DigitalObjectIdentifiers()
		{
			return new SAEON.Observations.Data.DigitalObjectIdentifierCollection().Where(DigitalObjectIdentifier.Columns.DatasetID, Id).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
        private SAEON.Observations.Data.DigitalObjectIdentifier _DigitalObjectIdentifier = null;
		/// <summary>
		/// Returns a DigitalObjectIdentifier ActiveRecord object related to this Dataset
		/// 
		/// </summary>
		public SAEON.Observations.Data.DigitalObjectIdentifier DigitalObjectIdentifier
		{
//			get { return SAEON.Observations.Data.DigitalObjectIdentifier.FetchByID(this.DigitalObjectIdentifierID); }  
			get { return _DigitalObjectIdentifier ?? (_DigitalObjectIdentifier = SAEON.Observations.Data.DigitalObjectIdentifier.FetchByID(this.DigitalObjectIdentifierID)); }
			set { SetColumnValue("DigitalObjectIdentifierID", value.Id); }
		}
		
		
        private SAEON.Observations.Data.PhenomenonOffering _PhenomenonOffering = null;
		/// <summary>
		/// Returns a PhenomenonOffering ActiveRecord object related to this Dataset
		/// 
		/// </summary>
		public SAEON.Observations.Data.PhenomenonOffering PhenomenonOffering
		{
//			get { return SAEON.Observations.Data.PhenomenonOffering.FetchByID(this.PhenomenonOfferingID); }  
			get { return _PhenomenonOffering ?? (_PhenomenonOffering = SAEON.Observations.Data.PhenomenonOffering.FetchByID(this.PhenomenonOfferingID)); }
			set { SetColumnValue("PhenomenonOfferingID", value.Id); }
		}
		
		
        private SAEON.Observations.Data.PhenomenonUOM _PhenomenonUOM = null;
		/// <summary>
		/// Returns a PhenomenonUOM ActiveRecord object related to this Dataset
		/// 
		/// </summary>
		public SAEON.Observations.Data.PhenomenonUOM PhenomenonUOM
		{
//			get { return SAEON.Observations.Data.PhenomenonUOM.FetchByID(this.PhenomenonUOMID); }  
			get { return _PhenomenonUOM ?? (_PhenomenonUOM = SAEON.Observations.Data.PhenomenonUOM.FetchByID(this.PhenomenonUOMID)); }
			set { SetColumnValue("PhenomenonUOMID", value.Id); }
		}
		
		
        private SAEON.Observations.Data.Station _Station = null;
		/// <summary>
		/// Returns a Station ActiveRecord object related to this Dataset
		/// 
		/// </summary>
		public SAEON.Observations.Data.Station Station
		{
//			get { return SAEON.Observations.Data.Station.FetchByID(this.StationID); }  
			get { return _Station ?? (_Station = SAEON.Observations.Data.Station.FetchByID(this.StationID)); }
			set { SetColumnValue("StationID", value.Id); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid varId,string varCode,string varName,string varDescription,string varTitle,Guid varStationID,Guid varPhenomenonOfferingID,Guid varPhenomenonUOMID,int? varDigitalObjectIdentifierID,int? varCount,int? varValueCount,int? varNullCount,int? varVerifiedCount,int? varUnverifiedCount,DateTime? varStartDate,DateTime? varEndDate,double? varLatitudeNorth,double? varLatitudeSouth,double? varLongitudeWest,double? varLongitudeEast,double? varElevationMinimum,double? varElevationMaximum,int varHashCode,bool? varNeedsUpdate,DateTime? varAddedAt,string varAddedBy,DateTime? varUpdatedAt,string varUpdatedBy,Guid varUserId,byte[] varRowVersion)
		{
			Dataset item = new Dataset();
			
			item.Id = varId;
			
			item.Code = varCode;
			
			item.Name = varName;
			
			item.Description = varDescription;
			
			item.Title = varTitle;
			
			item.StationID = varStationID;
			
			item.PhenomenonOfferingID = varPhenomenonOfferingID;
			
			item.PhenomenonUOMID = varPhenomenonUOMID;
			
			item.DigitalObjectIdentifierID = varDigitalObjectIdentifierID;
			
			item.Count = varCount;
			
			item.ValueCount = varValueCount;
			
			item.NullCount = varNullCount;
			
			item.VerifiedCount = varVerifiedCount;
			
			item.UnverifiedCount = varUnverifiedCount;
			
			item.StartDate = varStartDate;
			
			item.EndDate = varEndDate;
			
			item.LatitudeNorth = varLatitudeNorth;
			
			item.LatitudeSouth = varLatitudeSouth;
			
			item.LongitudeWest = varLongitudeWest;
			
			item.LongitudeEast = varLongitudeEast;
			
			item.ElevationMinimum = varElevationMinimum;
			
			item.ElevationMaximum = varElevationMaximum;
			
			item.HashCode = varHashCode;
			
			item.NeedsUpdate = varNeedsUpdate;
			
			item.AddedAt = varAddedAt;
			
			item.AddedBy = varAddedBy;
			
			item.UpdatedAt = varUpdatedAt;
			
			item.UpdatedBy = varUpdatedBy;
			
			item.UserId = varUserId;
			
			item.RowVersion = varRowVersion;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(Guid varId,string varCode,string varName,string varDescription,string varTitle,Guid varStationID,Guid varPhenomenonOfferingID,Guid varPhenomenonUOMID,int? varDigitalObjectIdentifierID,int? varCount,int? varValueCount,int? varNullCount,int? varVerifiedCount,int? varUnverifiedCount,DateTime? varStartDate,DateTime? varEndDate,double? varLatitudeNorth,double? varLatitudeSouth,double? varLongitudeWest,double? varLongitudeEast,double? varElevationMinimum,double? varElevationMaximum,int varHashCode,bool? varNeedsUpdate,DateTime? varAddedAt,string varAddedBy,DateTime? varUpdatedAt,string varUpdatedBy,Guid varUserId,byte[] varRowVersion)
		{
			Dataset item = new Dataset();
			
				item.Id = varId;
			
				item.Code = varCode;
			
				item.Name = varName;
			
				item.Description = varDescription;
			
				item.Title = varTitle;
			
				item.StationID = varStationID;
			
				item.PhenomenonOfferingID = varPhenomenonOfferingID;
			
				item.PhenomenonUOMID = varPhenomenonUOMID;
			
				item.DigitalObjectIdentifierID = varDigitalObjectIdentifierID;
			
				item.Count = varCount;
			
				item.ValueCount = varValueCount;
			
				item.NullCount = varNullCount;
			
				item.VerifiedCount = varVerifiedCount;
			
				item.UnverifiedCount = varUnverifiedCount;
			
				item.StartDate = varStartDate;
			
				item.EndDate = varEndDate;
			
				item.LatitudeNorth = varLatitudeNorth;
			
				item.LatitudeSouth = varLatitudeSouth;
			
				item.LongitudeWest = varLongitudeWest;
			
				item.LongitudeEast = varLongitudeEast;
			
				item.ElevationMinimum = varElevationMinimum;
			
				item.ElevationMaximum = varElevationMaximum;
			
				item.HashCode = varHashCode;
			
				item.NeedsUpdate = varNeedsUpdate;
			
				item.AddedAt = varAddedAt;
			
				item.AddedBy = varAddedBy;
			
				item.UpdatedAt = varUpdatedAt;
			
				item.UpdatedBy = varUpdatedBy;
			
				item.UserId = varUserId;
			
				item.RowVersion = varRowVersion;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn StationIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PhenomenonOfferingIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PhenomenonUOMIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DigitalObjectIdentifierIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CountColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ValueCountColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn NullCountColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn VerifiedCountColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn UnverifiedCountColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn StartDateColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn EndDateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn LatitudeNorthColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn LatitudeSouthColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn LongitudeWestColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn LongitudeEastColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ElevationMinimumColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ElevationMaximumColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn HashCodeColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn NeedsUpdateColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn AddedAtColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn AddedByColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedAtColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedByColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn UserIdColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn RowVersionColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string Code = @"Code";
			 public static string Name = @"Name";
			 public static string Description = @"Description";
			 public static string Title = @"Title";
			 public static string StationID = @"StationID";
			 public static string PhenomenonOfferingID = @"PhenomenonOfferingID";
			 public static string PhenomenonUOMID = @"PhenomenonUOMID";
			 public static string DigitalObjectIdentifierID = @"DigitalObjectIdentifierID";
			 public static string Count = @"Count";
			 public static string ValueCount = @"ValueCount";
			 public static string NullCount = @"NullCount";
			 public static string VerifiedCount = @"VerifiedCount";
			 public static string UnverifiedCount = @"UnverifiedCount";
			 public static string StartDate = @"StartDate";
			 public static string EndDate = @"EndDate";
			 public static string LatitudeNorth = @"LatitudeNorth";
			 public static string LatitudeSouth = @"LatitudeSouth";
			 public static string LongitudeWest = @"LongitudeWest";
			 public static string LongitudeEast = @"LongitudeEast";
			 public static string ElevationMinimum = @"ElevationMinimum";
			 public static string ElevationMaximum = @"ElevationMaximum";
			 public static string HashCode = @"HashCode";
			 public static string NeedsUpdate = @"NeedsUpdate";
			 public static string AddedAt = @"AddedAt";
			 public static string AddedBy = @"AddedBy";
			 public static string UpdatedAt = @"UpdatedAt";
			 public static string UpdatedBy = @"UpdatedBy";
			 public static string UserId = @"UserId";
			 public static string RowVersion = @"RowVersion";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
