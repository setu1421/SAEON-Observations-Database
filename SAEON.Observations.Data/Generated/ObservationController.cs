using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data
{
    /// <summary>
    /// Controller class for Observation
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class ObservationController
    {
        // Preload our schema..
        Observation thisSchemaLoad = new Observation();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ObservationCollection FetchAll()
        {
            ObservationCollection coll = new ObservationCollection();
            Query qry = new Query(Observation.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ObservationCollection FetchByID(object Id)
        {
            ObservationCollection coll = new ObservationCollection().Where("ID", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public ObservationCollection FetchByQuery(Query qry)
        {
            ObservationCollection coll = new ObservationCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (Observation.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (Observation.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(Guid SensorID,DateTime ValueDate,double? RawValue,double? DataValue,string Comment,Guid PhenomenonOfferingID,Guid PhenomenonUOMID,Guid ImportBatchID,Guid? StatusID,Guid? StatusReasonID,Guid? CorrelationID,Guid UserId,DateTime AddedDate,DateTime? AddedAt,DateTime? UpdatedAt,byte[] RowVersion,string TextValue,double? Elevation,double? Latitude,double? Longitude,DateTime? ValueDay,Guid? VerifiedBy,DateTime? VerifiedAt,Guid? UnverifiedBy,DateTime? UnverifiedAt,int? ValueYear,int? ValueDecade)
	    {
		    Observation item = new Observation();
		    
            item.SensorID = SensorID;
            
            item.ValueDate = ValueDate;
            
            item.RawValue = RawValue;
            
            item.DataValue = DataValue;
            
            item.Comment = Comment;
            
            item.PhenomenonOfferingID = PhenomenonOfferingID;
            
            item.PhenomenonUOMID = PhenomenonUOMID;
            
            item.ImportBatchID = ImportBatchID;
            
            item.StatusID = StatusID;
            
            item.StatusReasonID = StatusReasonID;
            
            item.CorrelationID = CorrelationID;
            
            item.UserId = UserId;
            
            item.AddedDate = AddedDate;
            
            item.AddedAt = AddedAt;
            
            item.UpdatedAt = UpdatedAt;
            
            item.RowVersion = RowVersion;
            
            item.TextValue = TextValue;
            
            item.Elevation = Elevation;
            
            item.Latitude = Latitude;
            
            item.Longitude = Longitude;
            
            item.ValueDay = ValueDay;
            
            item.VerifiedBy = VerifiedBy;
            
            item.VerifiedAt = VerifiedAt;
            
            item.UnverifiedBy = UnverifiedBy;
            
            item.UnverifiedAt = UnverifiedAt;
            
            item.ValueYear = ValueYear;
            
            item.ValueDecade = ValueDecade;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(Guid SensorID,DateTime ValueDate,double? RawValue,double? DataValue,string Comment,Guid PhenomenonOfferingID,Guid PhenomenonUOMID,Guid ImportBatchID,Guid? StatusID,Guid? StatusReasonID,Guid? CorrelationID,Guid UserId,DateTime AddedDate,DateTime? AddedAt,DateTime? UpdatedAt,int Id,byte[] RowVersion,string TextValue,double? Elevation,double? Latitude,double? Longitude,DateTime? ValueDay,Guid? VerifiedBy,DateTime? VerifiedAt,Guid? UnverifiedBy,DateTime? UnverifiedAt,int? ValueYear,int? ValueDecade)
	    {
		    Observation item = new Observation();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.SensorID = SensorID;
				
			item.ValueDate = ValueDate;
				
			item.RawValue = RawValue;
				
			item.DataValue = DataValue;
				
			item.Comment = Comment;
				
			item.PhenomenonOfferingID = PhenomenonOfferingID;
				
			item.PhenomenonUOMID = PhenomenonUOMID;
				
			item.ImportBatchID = ImportBatchID;
				
			item.StatusID = StatusID;
				
			item.StatusReasonID = StatusReasonID;
				
			item.CorrelationID = CorrelationID;
				
			item.UserId = UserId;
				
			item.AddedDate = AddedDate;
				
			item.AddedAt = AddedAt;
				
			item.UpdatedAt = UpdatedAt;
				
			item.Id = Id;
				
			item.RowVersion = RowVersion;
				
			item.TextValue = TextValue;
				
			item.Elevation = Elevation;
				
			item.Latitude = Latitude;
				
			item.Longitude = Longitude;
				
			item.ValueDay = ValueDay;
				
			item.VerifiedBy = VerifiedBy;
				
			item.VerifiedAt = VerifiedAt;
				
			item.UnverifiedBy = UnverifiedBy;
				
			item.UnverifiedAt = UnverifiedAt;
				
			item.ValueYear = ValueYear;
				
			item.ValueDecade = ValueDecade;
				
	        item.Save(UserName);
	    }
    }
}
