using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data
{
	/// <summary>
	/// Strongly-typed collection for the DigitalObjectIdentifier class.
	/// </summary>
    [Serializable]
	public partial class DigitalObjectIdentifierCollection : ActiveList<DigitalObjectIdentifier, DigitalObjectIdentifierCollection>
	{	   
		public DigitalObjectIdentifierCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DigitalObjectIdentifierCollection</returns>
		public DigitalObjectIdentifierCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DigitalObjectIdentifier o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DigitalObjectIdentifiers table.
	/// </summary>
	[Serializable]
	public partial class DigitalObjectIdentifier : ActiveRecord<DigitalObjectIdentifier>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DigitalObjectIdentifier()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DigitalObjectIdentifier(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DigitalObjectIdentifier(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DigitalObjectIdentifier(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DigitalObjectIdentifiers", TableType.Table, DataService.GetInstance("ObservationsDB"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarDoi = new TableSchema.TableColumn(schema);
				colvarDoi.ColumnName = "DOI";
				colvarDoi.DataType = DbType.AnsiString;
				colvarDoi.MaxLength = 36;
				colvarDoi.AutoIncrement = false;
				colvarDoi.IsNullable = true;
				colvarDoi.IsPrimaryKey = false;
				colvarDoi.IsForeignKey = false;
				colvarDoi.IsReadOnly = true;
				colvarDoi.DefaultSetting = @"";
				colvarDoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoi);
				
				TableSchema.TableColumn colvarDOIUrl = new TableSchema.TableColumn(schema);
				colvarDOIUrl.ColumnName = "DOIUrl";
				colvarDOIUrl.DataType = DbType.AnsiString;
				colvarDOIUrl.MaxLength = 52;
				colvarDOIUrl.AutoIncrement = false;
				colvarDOIUrl.IsNullable = true;
				colvarDOIUrl.IsPrimaryKey = false;
				colvarDOIUrl.IsForeignKey = false;
				colvarDOIUrl.IsReadOnly = true;
				colvarDOIUrl.DefaultSetting = @"";
				colvarDOIUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOIUrl);
				
				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.AnsiString;
				colvarName.MaxLength = 500;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);
				
				TableSchema.TableColumn colvarAddedAt = new TableSchema.TableColumn(schema);
				colvarAddedAt.ColumnName = "AddedAt";
				colvarAddedAt.DataType = DbType.DateTime;
				colvarAddedAt.MaxLength = 0;
				colvarAddedAt.AutoIncrement = false;
				colvarAddedAt.IsNullable = true;
				colvarAddedAt.IsPrimaryKey = false;
				colvarAddedAt.IsForeignKey = false;
				colvarAddedAt.IsReadOnly = false;
				
						colvarAddedAt.DefaultSetting = @"(getdate())";
				colvarAddedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddedAt);
				
				TableSchema.TableColumn colvarAddedBy = new TableSchema.TableColumn(schema);
				colvarAddedBy.ColumnName = "AddedBy";
				colvarAddedBy.DataType = DbType.AnsiString;
				colvarAddedBy.MaxLength = 128;
				colvarAddedBy.AutoIncrement = false;
				colvarAddedBy.IsNullable = false;
				colvarAddedBy.IsPrimaryKey = false;
				colvarAddedBy.IsForeignKey = false;
				colvarAddedBy.IsReadOnly = false;
				colvarAddedBy.DefaultSetting = @"";
				colvarAddedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddedBy);
				
				TableSchema.TableColumn colvarUpdatedAt = new TableSchema.TableColumn(schema);
				colvarUpdatedAt.ColumnName = "UpdatedAt";
				colvarUpdatedAt.DataType = DbType.DateTime;
				colvarUpdatedAt.MaxLength = 0;
				colvarUpdatedAt.AutoIncrement = false;
				colvarUpdatedAt.IsNullable = true;
				colvarUpdatedAt.IsPrimaryKey = false;
				colvarUpdatedAt.IsForeignKey = false;
				colvarUpdatedAt.IsReadOnly = false;
				
						colvarUpdatedAt.DefaultSetting = @"(getdate())";
				colvarUpdatedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedAt);
				
				TableSchema.TableColumn colvarUpdatedBy = new TableSchema.TableColumn(schema);
				colvarUpdatedBy.ColumnName = "UpdatedBy";
				colvarUpdatedBy.DataType = DbType.AnsiString;
				colvarUpdatedBy.MaxLength = 128;
				colvarUpdatedBy.AutoIncrement = false;
				colvarUpdatedBy.IsNullable = false;
				colvarUpdatedBy.IsPrimaryKey = false;
				colvarUpdatedBy.IsForeignKey = false;
				colvarUpdatedBy.IsReadOnly = false;
				colvarUpdatedBy.DefaultSetting = @"";
				colvarUpdatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedBy);
				
				TableSchema.TableColumn colvarRowVersion = new TableSchema.TableColumn(schema);
				colvarRowVersion.ColumnName = "RowVersion";
				colvarRowVersion.DataType = DbType.Binary;
				colvarRowVersion.MaxLength = 0;
				colvarRowVersion.AutoIncrement = false;
				colvarRowVersion.IsNullable = false;
				colvarRowVersion.IsPrimaryKey = false;
				colvarRowVersion.IsForeignKey = false;
				colvarRowVersion.IsReadOnly = true;
				colvarRowVersion.DefaultSetting = @"";
				colvarRowVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowVersion);
				
				TableSchema.TableColumn colvarAlternateID = new TableSchema.TableColumn(schema);
				colvarAlternateID.ColumnName = "AlternateID";
				colvarAlternateID.DataType = DbType.Guid;
				colvarAlternateID.MaxLength = 0;
				colvarAlternateID.AutoIncrement = false;
				colvarAlternateID.IsNullable = true;
				colvarAlternateID.IsPrimaryKey = false;
				colvarAlternateID.IsForeignKey = false;
				colvarAlternateID.IsReadOnly = false;
				
						colvarAlternateID.DefaultSetting = @"(newid())";
				colvarAlternateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlternateID);
				
				TableSchema.TableColumn colvarParentID = new TableSchema.TableColumn(schema);
				colvarParentID.ColumnName = "ParentID";
				colvarParentID.DataType = DbType.Int32;
				colvarParentID.MaxLength = 0;
				colvarParentID.AutoIncrement = false;
				colvarParentID.IsNullable = true;
				colvarParentID.IsPrimaryKey = false;
				colvarParentID.IsForeignKey = true;
				colvarParentID.IsReadOnly = false;
				colvarParentID.DefaultSetting = @"";
				
					colvarParentID.ForeignKeyTableName = "DigitalObjectIdentifiers";
				schema.Columns.Add(colvarParentID);
				
				TableSchema.TableColumn colvarDOIType = new TableSchema.TableColumn(schema);
				colvarDOIType.ColumnName = "DOIType";
				colvarDOIType.DataType = DbType.Byte;
				colvarDOIType.MaxLength = 0;
				colvarDOIType.AutoIncrement = false;
				colvarDOIType.IsNullable = false;
				colvarDOIType.IsPrimaryKey = false;
				colvarDOIType.IsForeignKey = false;
				colvarDOIType.IsReadOnly = false;
				colvarDOIType.DefaultSetting = @"";
				colvarDOIType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOIType);
				
				TableSchema.TableColumn colvarCode = new TableSchema.TableColumn(schema);
				colvarCode.ColumnName = "Code";
				colvarCode.DataType = DbType.AnsiString;
				colvarCode.MaxLength = 200;
				colvarCode.AutoIncrement = false;
				colvarCode.IsNullable = false;
				colvarCode.IsPrimaryKey = false;
				colvarCode.IsForeignKey = false;
				colvarCode.IsReadOnly = false;
				colvarCode.DefaultSetting = @"";
				colvarCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCode);
				
				TableSchema.TableColumn colvarMetadataJson = new TableSchema.TableColumn(schema);
				colvarMetadataJson.ColumnName = "MetadataJson";
				colvarMetadataJson.DataType = DbType.AnsiString;
				colvarMetadataJson.MaxLength = -1;
				colvarMetadataJson.AutoIncrement = false;
				colvarMetadataJson.IsNullable = false;
				colvarMetadataJson.IsPrimaryKey = false;
				colvarMetadataJson.IsForeignKey = false;
				colvarMetadataJson.IsReadOnly = false;
				colvarMetadataJson.DefaultSetting = @"";
				colvarMetadataJson.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMetadataJson);
				
				TableSchema.TableColumn colvarMetadataJsonSha256 = new TableSchema.TableColumn(schema);
				colvarMetadataJsonSha256.ColumnName = "MetadataJsonSha256";
				colvarMetadataJsonSha256.DataType = DbType.Binary;
				colvarMetadataJsonSha256.MaxLength = 32;
				colvarMetadataJsonSha256.AutoIncrement = false;
				colvarMetadataJsonSha256.IsNullable = false;
				colvarMetadataJsonSha256.IsPrimaryKey = false;
				colvarMetadataJsonSha256.IsForeignKey = false;
				colvarMetadataJsonSha256.IsReadOnly = false;
				colvarMetadataJsonSha256.DefaultSetting = @"";
				colvarMetadataJsonSha256.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMetadataJsonSha256);
				
				TableSchema.TableColumn colvarMetadataHtml = new TableSchema.TableColumn(schema);
				colvarMetadataHtml.ColumnName = "MetadataHtml";
				colvarMetadataHtml.DataType = DbType.AnsiString;
				colvarMetadataHtml.MaxLength = -1;
				colvarMetadataHtml.AutoIncrement = false;
				colvarMetadataHtml.IsNullable = false;
				colvarMetadataHtml.IsPrimaryKey = false;
				colvarMetadataHtml.IsForeignKey = false;
				colvarMetadataHtml.IsReadOnly = false;
				colvarMetadataHtml.DefaultSetting = @"";
				colvarMetadataHtml.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMetadataHtml);
				
				TableSchema.TableColumn colvarMetadataUrl = new TableSchema.TableColumn(schema);
				colvarMetadataUrl.ColumnName = "MetadataUrl";
				colvarMetadataUrl.DataType = DbType.AnsiString;
				colvarMetadataUrl.MaxLength = 250;
				colvarMetadataUrl.AutoIncrement = false;
				colvarMetadataUrl.IsNullable = false;
				colvarMetadataUrl.IsPrimaryKey = false;
				colvarMetadataUrl.IsForeignKey = false;
				colvarMetadataUrl.IsReadOnly = false;
				colvarMetadataUrl.DefaultSetting = @"";
				colvarMetadataUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMetadataUrl);
				
				TableSchema.TableColumn colvarObjectStoreUrl = new TableSchema.TableColumn(schema);
				colvarObjectStoreUrl.ColumnName = "ObjectStoreUrl";
				colvarObjectStoreUrl.DataType = DbType.AnsiString;
				colvarObjectStoreUrl.MaxLength = 250;
				colvarObjectStoreUrl.AutoIncrement = false;
				colvarObjectStoreUrl.IsNullable = true;
				colvarObjectStoreUrl.IsPrimaryKey = false;
				colvarObjectStoreUrl.IsForeignKey = false;
				colvarObjectStoreUrl.IsReadOnly = false;
				colvarObjectStoreUrl.DefaultSetting = @"";
				colvarObjectStoreUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectStoreUrl);
				
				TableSchema.TableColumn colvarQueryUrl = new TableSchema.TableColumn(schema);
				colvarQueryUrl.ColumnName = "QueryUrl";
				colvarQueryUrl.DataType = DbType.AnsiString;
				colvarQueryUrl.MaxLength = 250;
				colvarQueryUrl.AutoIncrement = false;
				colvarQueryUrl.IsNullable = true;
				colvarQueryUrl.IsPrimaryKey = false;
				colvarQueryUrl.IsForeignKey = false;
				colvarQueryUrl.IsReadOnly = false;
				colvarQueryUrl.DefaultSetting = @"";
				colvarQueryUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQueryUrl);
				
				TableSchema.TableColumn colvarODPMetadataID = new TableSchema.TableColumn(schema);
				colvarODPMetadataID.ColumnName = "ODPMetadataID";
				colvarODPMetadataID.DataType = DbType.Guid;
				colvarODPMetadataID.MaxLength = 0;
				colvarODPMetadataID.AutoIncrement = false;
				colvarODPMetadataID.IsNullable = true;
				colvarODPMetadataID.IsPrimaryKey = false;
				colvarODPMetadataID.IsForeignKey = false;
				colvarODPMetadataID.IsReadOnly = false;
				colvarODPMetadataID.DefaultSetting = @"";
				colvarODPMetadataID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarODPMetadataID);
				
				TableSchema.TableColumn colvarODPMetadataNeedsUpdate = new TableSchema.TableColumn(schema);
				colvarODPMetadataNeedsUpdate.ColumnName = "ODPMetadataNeedsUpdate";
				colvarODPMetadataNeedsUpdate.DataType = DbType.Boolean;
				colvarODPMetadataNeedsUpdate.MaxLength = 0;
				colvarODPMetadataNeedsUpdate.AutoIncrement = false;
				colvarODPMetadataNeedsUpdate.IsNullable = true;
				colvarODPMetadataNeedsUpdate.IsPrimaryKey = false;
				colvarODPMetadataNeedsUpdate.IsForeignKey = false;
				colvarODPMetadataNeedsUpdate.IsReadOnly = false;
				colvarODPMetadataNeedsUpdate.DefaultSetting = @"";
				colvarODPMetadataNeedsUpdate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarODPMetadataNeedsUpdate);
				
				TableSchema.TableColumn colvarODPMetadataIsValid = new TableSchema.TableColumn(schema);
				colvarODPMetadataIsValid.ColumnName = "ODPMetadataIsValid";
				colvarODPMetadataIsValid.DataType = DbType.Boolean;
				colvarODPMetadataIsValid.MaxLength = 0;
				colvarODPMetadataIsValid.AutoIncrement = false;
				colvarODPMetadataIsValid.IsNullable = true;
				colvarODPMetadataIsValid.IsPrimaryKey = false;
				colvarODPMetadataIsValid.IsForeignKey = false;
				colvarODPMetadataIsValid.IsReadOnly = false;
				colvarODPMetadataIsValid.DefaultSetting = @"";
				colvarODPMetadataIsValid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarODPMetadataIsValid);
				
				TableSchema.TableColumn colvarODPMetadataErrors = new TableSchema.TableColumn(schema);
				colvarODPMetadataErrors.ColumnName = "ODPMetadataErrors";
				colvarODPMetadataErrors.DataType = DbType.AnsiString;
				colvarODPMetadataErrors.MaxLength = -1;
				colvarODPMetadataErrors.AutoIncrement = false;
				colvarODPMetadataErrors.IsNullable = true;
				colvarODPMetadataErrors.IsPrimaryKey = false;
				colvarODPMetadataErrors.IsForeignKey = false;
				colvarODPMetadataErrors.IsReadOnly = false;
				colvarODPMetadataErrors.DefaultSetting = @"";
				colvarODPMetadataErrors.ForeignKeyTableName = "";
				schema.Columns.Add(colvarODPMetadataErrors);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.AnsiString;
				colvarTitle.MaxLength = 5000;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = false;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarCitationHtml = new TableSchema.TableColumn(schema);
				colvarCitationHtml.ColumnName = "CitationHtml";
				colvarCitationHtml.DataType = DbType.AnsiString;
				colvarCitationHtml.MaxLength = 5000;
				colvarCitationHtml.AutoIncrement = false;
				colvarCitationHtml.IsNullable = true;
				colvarCitationHtml.IsPrimaryKey = false;
				colvarCitationHtml.IsForeignKey = false;
				colvarCitationHtml.IsReadOnly = false;
				colvarCitationHtml.DefaultSetting = @"";
				colvarCitationHtml.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCitationHtml);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 5000;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarDescriptionHtml = new TableSchema.TableColumn(schema);
				colvarDescriptionHtml.ColumnName = "DescriptionHtml";
				colvarDescriptionHtml.DataType = DbType.AnsiString;
				colvarDescriptionHtml.MaxLength = 5000;
				colvarDescriptionHtml.AutoIncrement = false;
				colvarDescriptionHtml.IsNullable = false;
				colvarDescriptionHtml.IsPrimaryKey = false;
				colvarDescriptionHtml.IsForeignKey = false;
				colvarDescriptionHtml.IsReadOnly = false;
				colvarDescriptionHtml.DefaultSetting = @"";
				colvarDescriptionHtml.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescriptionHtml);
				
				TableSchema.TableColumn colvarCitation = new TableSchema.TableColumn(schema);
				colvarCitation.ColumnName = "Citation";
				colvarCitation.DataType = DbType.AnsiString;
				colvarCitation.MaxLength = 5000;
				colvarCitation.AutoIncrement = false;
				colvarCitation.IsNullable = true;
				colvarCitation.IsPrimaryKey = false;
				colvarCitation.IsForeignKey = false;
				colvarCitation.IsReadOnly = false;
				colvarCitation.DefaultSetting = @"";
				colvarCitation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCitation);
				
				TableSchema.TableColumn colvarODPMetadataIsPublished = new TableSchema.TableColumn(schema);
				colvarODPMetadataIsPublished.ColumnName = "ODPMetadataIsPublished";
				colvarODPMetadataIsPublished.DataType = DbType.Boolean;
				colvarODPMetadataIsPublished.MaxLength = 0;
				colvarODPMetadataIsPublished.AutoIncrement = false;
				colvarODPMetadataIsPublished.IsNullable = true;
				colvarODPMetadataIsPublished.IsPrimaryKey = false;
				colvarODPMetadataIsPublished.IsForeignKey = false;
				colvarODPMetadataIsPublished.IsReadOnly = false;
				colvarODPMetadataIsPublished.DefaultSetting = @"";
				colvarODPMetadataIsPublished.ForeignKeyTableName = "";
				schema.Columns.Add(colvarODPMetadataIsPublished);
				
				TableSchema.TableColumn colvarODPMetadataPublishErrors = new TableSchema.TableColumn(schema);
				colvarODPMetadataPublishErrors.ColumnName = "ODPMetadataPublishErrors";
				colvarODPMetadataPublishErrors.DataType = DbType.AnsiString;
				colvarODPMetadataPublishErrors.MaxLength = -1;
				colvarODPMetadataPublishErrors.AutoIncrement = false;
				colvarODPMetadataPublishErrors.IsNullable = true;
				colvarODPMetadataPublishErrors.IsPrimaryKey = false;
				colvarODPMetadataPublishErrors.IsForeignKey = false;
				colvarODPMetadataPublishErrors.IsReadOnly = false;
				colvarODPMetadataPublishErrors.DefaultSetting = @"";
				colvarODPMetadataPublishErrors.ForeignKeyTableName = "";
				schema.Columns.Add(colvarODPMetadataPublishErrors);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ObservationsDB"].AddSchema("DigitalObjectIdentifiers",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Doi")]
		[Bindable(true)]
		public string Doi 
		{
			get { return GetColumnValue<string>(Columns.Doi); }
			set { SetColumnValue(Columns.Doi, value); }
		}
		  
		[XmlAttribute("DOIUrl")]
		[Bindable(true)]
		public string DOIUrl 
		{
			get { return GetColumnValue<string>(Columns.DOIUrl); }
			set { SetColumnValue(Columns.DOIUrl, value); }
		}
		  
		[XmlAttribute("Name")]
		[Bindable(true)]
		public string Name 
		{
			get { return GetColumnValue<string>(Columns.Name); }
			set { SetColumnValue(Columns.Name, value); }
		}
		  
		[XmlAttribute("AddedAt")]
		[Bindable(true)]
		public DateTime? AddedAt 
		{
			get { return GetColumnValue<DateTime?>(Columns.AddedAt); }
			set { SetColumnValue(Columns.AddedAt, value); }
		}
		  
		[XmlAttribute("AddedBy")]
		[Bindable(true)]
		public string AddedBy 
		{
			get { return GetColumnValue<string>(Columns.AddedBy); }
			set { SetColumnValue(Columns.AddedBy, value); }
		}
		  
		[XmlAttribute("UpdatedAt")]
		[Bindable(true)]
		public DateTime? UpdatedAt 
		{
			get { return GetColumnValue<DateTime?>(Columns.UpdatedAt); }
			set { SetColumnValue(Columns.UpdatedAt, value); }
		}
		  
		[XmlAttribute("UpdatedBy")]
		[Bindable(true)]
		public string UpdatedBy 
		{
			get { return GetColumnValue<string>(Columns.UpdatedBy); }
			set { SetColumnValue(Columns.UpdatedBy, value); }
		}
		  
		[XmlAttribute("RowVersion")]
		[Bindable(true)]
		public byte[] RowVersion 
		{
			get { return GetColumnValue<byte[]>(Columns.RowVersion); }
			set { SetColumnValue(Columns.RowVersion, value); }
		}
		  
		[XmlAttribute("AlternateID")]
		[Bindable(true)]
		public Guid? AlternateID 
		{
			get { return GetColumnValue<Guid?>(Columns.AlternateID); }
			set { SetColumnValue(Columns.AlternateID, value); }
		}
		  
		[XmlAttribute("ParentID")]
		[Bindable(true)]
		public int? ParentID 
		{
			get { return GetColumnValue<int?>(Columns.ParentID); }
			set { SetColumnValue(Columns.ParentID, value); }
		}
		  
		[XmlAttribute("DOIType")]
		[Bindable(true)]
		public byte DOIType 
		{
			get { return GetColumnValue<byte>(Columns.DOIType); }
			set { SetColumnValue(Columns.DOIType, value); }
		}
		  
		[XmlAttribute("Code")]
		[Bindable(true)]
		public string Code 
		{
			get { return GetColumnValue<string>(Columns.Code); }
			set { SetColumnValue(Columns.Code, value); }
		}
		  
		[XmlAttribute("MetadataJson")]
		[Bindable(true)]
		public string MetadataJson 
		{
			get { return GetColumnValue<string>(Columns.MetadataJson); }
			set { SetColumnValue(Columns.MetadataJson, value); }
		}
		  
		[XmlAttribute("MetadataJsonSha256")]
		[Bindable(true)]
		public byte[] MetadataJsonSha256 
		{
			get { return GetColumnValue<byte[]>(Columns.MetadataJsonSha256); }
			set { SetColumnValue(Columns.MetadataJsonSha256, value); }
		}
		  
		[XmlAttribute("MetadataHtml")]
		[Bindable(true)]
		public string MetadataHtml 
		{
			get { return GetColumnValue<string>(Columns.MetadataHtml); }
			set { SetColumnValue(Columns.MetadataHtml, value); }
		}
		  
		[XmlAttribute("MetadataUrl")]
		[Bindable(true)]
		public string MetadataUrl 
		{
			get { return GetColumnValue<string>(Columns.MetadataUrl); }
			set { SetColumnValue(Columns.MetadataUrl, value); }
		}
		  
		[XmlAttribute("ObjectStoreUrl")]
		[Bindable(true)]
		public string ObjectStoreUrl 
		{
			get { return GetColumnValue<string>(Columns.ObjectStoreUrl); }
			set { SetColumnValue(Columns.ObjectStoreUrl, value); }
		}
		  
		[XmlAttribute("QueryUrl")]
		[Bindable(true)]
		public string QueryUrl 
		{
			get { return GetColumnValue<string>(Columns.QueryUrl); }
			set { SetColumnValue(Columns.QueryUrl, value); }
		}
		  
		[XmlAttribute("ODPMetadataID")]
		[Bindable(true)]
		public Guid? ODPMetadataID 
		{
			get { return GetColumnValue<Guid?>(Columns.ODPMetadataID); }
			set { SetColumnValue(Columns.ODPMetadataID, value); }
		}
		  
		[XmlAttribute("ODPMetadataNeedsUpdate")]
		[Bindable(true)]
		public bool? ODPMetadataNeedsUpdate 
		{
			get { return GetColumnValue<bool?>(Columns.ODPMetadataNeedsUpdate); }
			set { SetColumnValue(Columns.ODPMetadataNeedsUpdate, value); }
		}
		  
		[XmlAttribute("ODPMetadataIsValid")]
		[Bindable(true)]
		public bool? ODPMetadataIsValid 
		{
			get { return GetColumnValue<bool?>(Columns.ODPMetadataIsValid); }
			set { SetColumnValue(Columns.ODPMetadataIsValid, value); }
		}
		  
		[XmlAttribute("ODPMetadataErrors")]
		[Bindable(true)]
		public string ODPMetadataErrors 
		{
			get { return GetColumnValue<string>(Columns.ODPMetadataErrors); }
			set { SetColumnValue(Columns.ODPMetadataErrors, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("CitationHtml")]
		[Bindable(true)]
		public string CitationHtml 
		{
			get { return GetColumnValue<string>(Columns.CitationHtml); }
			set { SetColumnValue(Columns.CitationHtml, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("DescriptionHtml")]
		[Bindable(true)]
		public string DescriptionHtml 
		{
			get { return GetColumnValue<string>(Columns.DescriptionHtml); }
			set { SetColumnValue(Columns.DescriptionHtml, value); }
		}
		  
		[XmlAttribute("Citation")]
		[Bindable(true)]
		public string Citation 
		{
			get { return GetColumnValue<string>(Columns.Citation); }
			set { SetColumnValue(Columns.Citation, value); }
		}
		  
		[XmlAttribute("ODPMetadataIsPublished")]
		[Bindable(true)]
		public bool? ODPMetadataIsPublished 
		{
			get { return GetColumnValue<bool?>(Columns.ODPMetadataIsPublished); }
			set { SetColumnValue(Columns.ODPMetadataIsPublished, value); }
		}
		  
		[XmlAttribute("ODPMetadataPublishErrors")]
		[Bindable(true)]
		public string ODPMetadataPublishErrors 
		{
			get { return GetColumnValue<string>(Columns.ODPMetadataPublishErrors); }
			set { SetColumnValue(Columns.ODPMetadataPublishErrors, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SAEON.Observations.Data.DigitalObjectIdentifierCollection ChildDigitalObjectIdentifiers()
		{
			return new SAEON.Observations.Data.DigitalObjectIdentifierCollection().Where(DigitalObjectIdentifier.Columns.ParentID, Id).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
        private SAEON.Observations.Data.DigitalObjectIdentifier _ParentDigitalObjectIdentifier = null;
		/// <summary>
		/// Returns a DigitalObjectIdentifier ActiveRecord object related to this DigitalObjectIdentifier
		/// 
		/// </summary>
		public SAEON.Observations.Data.DigitalObjectIdentifier ParentDigitalObjectIdentifier
		{
//			get { return SAEON.Observations.Data.DigitalObjectIdentifier.FetchByID(this.ParentID); }  
			get { return _ParentDigitalObjectIdentifier ?? (_ParentDigitalObjectIdentifier = SAEON.Observations.Data.DigitalObjectIdentifier.FetchByID(this.ParentID)); }
			set { SetColumnValue("ParentID", value.Id); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDoi,string varDOIUrl,string varName,DateTime? varAddedAt,string varAddedBy,DateTime? varUpdatedAt,string varUpdatedBy,byte[] varRowVersion,Guid? varAlternateID,int? varParentID,byte varDOIType,string varCode,string varMetadataJson,byte[] varMetadataJsonSha256,string varMetadataHtml,string varMetadataUrl,string varObjectStoreUrl,string varQueryUrl,Guid? varODPMetadataID,bool? varODPMetadataNeedsUpdate,bool? varODPMetadataIsValid,string varODPMetadataErrors,string varTitle,string varCitationHtml,string varDescription,string varDescriptionHtml,string varCitation,bool? varODPMetadataIsPublished,string varODPMetadataPublishErrors)
		{
			DigitalObjectIdentifier item = new DigitalObjectIdentifier();
			
			item.Doi = varDoi;
			
			item.DOIUrl = varDOIUrl;
			
			item.Name = varName;
			
			item.AddedAt = varAddedAt;
			
			item.AddedBy = varAddedBy;
			
			item.UpdatedAt = varUpdatedAt;
			
			item.UpdatedBy = varUpdatedBy;
			
			item.RowVersion = varRowVersion;
			
			item.AlternateID = varAlternateID;
			
			item.ParentID = varParentID;
			
			item.DOIType = varDOIType;
			
			item.Code = varCode;
			
			item.MetadataJson = varMetadataJson;
			
			item.MetadataJsonSha256 = varMetadataJsonSha256;
			
			item.MetadataHtml = varMetadataHtml;
			
			item.MetadataUrl = varMetadataUrl;
			
			item.ObjectStoreUrl = varObjectStoreUrl;
			
			item.QueryUrl = varQueryUrl;
			
			item.ODPMetadataID = varODPMetadataID;
			
			item.ODPMetadataNeedsUpdate = varODPMetadataNeedsUpdate;
			
			item.ODPMetadataIsValid = varODPMetadataIsValid;
			
			item.ODPMetadataErrors = varODPMetadataErrors;
			
			item.Title = varTitle;
			
			item.CitationHtml = varCitationHtml;
			
			item.Description = varDescription;
			
			item.DescriptionHtml = varDescriptionHtml;
			
			item.Citation = varCitation;
			
			item.ODPMetadataIsPublished = varODPMetadataIsPublished;
			
			item.ODPMetadataPublishErrors = varODPMetadataPublishErrors;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varDoi,string varDOIUrl,string varName,DateTime? varAddedAt,string varAddedBy,DateTime? varUpdatedAt,string varUpdatedBy,byte[] varRowVersion,Guid? varAlternateID,int? varParentID,byte varDOIType,string varCode,string varMetadataJson,byte[] varMetadataJsonSha256,string varMetadataHtml,string varMetadataUrl,string varObjectStoreUrl,string varQueryUrl,Guid? varODPMetadataID,bool? varODPMetadataNeedsUpdate,bool? varODPMetadataIsValid,string varODPMetadataErrors,string varTitle,string varCitationHtml,string varDescription,string varDescriptionHtml,string varCitation,bool? varODPMetadataIsPublished,string varODPMetadataPublishErrors)
		{
			DigitalObjectIdentifier item = new DigitalObjectIdentifier();
			
				item.Id = varId;
			
				item.Doi = varDoi;
			
				item.DOIUrl = varDOIUrl;
			
				item.Name = varName;
			
				item.AddedAt = varAddedAt;
			
				item.AddedBy = varAddedBy;
			
				item.UpdatedAt = varUpdatedAt;
			
				item.UpdatedBy = varUpdatedBy;
			
				item.RowVersion = varRowVersion;
			
				item.AlternateID = varAlternateID;
			
				item.ParentID = varParentID;
			
				item.DOIType = varDOIType;
			
				item.Code = varCode;
			
				item.MetadataJson = varMetadataJson;
			
				item.MetadataJsonSha256 = varMetadataJsonSha256;
			
				item.MetadataHtml = varMetadataHtml;
			
				item.MetadataUrl = varMetadataUrl;
			
				item.ObjectStoreUrl = varObjectStoreUrl;
			
				item.QueryUrl = varQueryUrl;
			
				item.ODPMetadataID = varODPMetadataID;
			
				item.ODPMetadataNeedsUpdate = varODPMetadataNeedsUpdate;
			
				item.ODPMetadataIsValid = varODPMetadataIsValid;
			
				item.ODPMetadataErrors = varODPMetadataErrors;
			
				item.Title = varTitle;
			
				item.CitationHtml = varCitationHtml;
			
				item.Description = varDescription;
			
				item.DescriptionHtml = varDescriptionHtml;
			
				item.Citation = varCitation;
			
				item.ODPMetadataIsPublished = varODPMetadataIsPublished;
			
				item.ODPMetadataPublishErrors = varODPMetadataPublishErrors;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DoiColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DOIUrlColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AddedAtColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn AddedByColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedAtColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedByColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn RowVersionColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn AlternateIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ParentIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn DOITypeColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CodeColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn MetadataJsonColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn MetadataJsonSha256Column
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn MetadataHtmlColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn MetadataUrlColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectStoreUrlColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn QueryUrlColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ODPMetadataIDColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ODPMetadataNeedsUpdateColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ODPMetadataIsValidColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn ODPMetadataErrorsColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn CitationHtmlColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionHtmlColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn CitationColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn ODPMetadataIsPublishedColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn ODPMetadataPublishErrorsColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string Doi = @"DOI";
			 public static string DOIUrl = @"DOIUrl";
			 public static string Name = @"Name";
			 public static string AddedAt = @"AddedAt";
			 public static string AddedBy = @"AddedBy";
			 public static string UpdatedAt = @"UpdatedAt";
			 public static string UpdatedBy = @"UpdatedBy";
			 public static string RowVersion = @"RowVersion";
			 public static string AlternateID = @"AlternateID";
			 public static string ParentID = @"ParentID";
			 public static string DOIType = @"DOIType";
			 public static string Code = @"Code";
			 public static string MetadataJson = @"MetadataJson";
			 public static string MetadataJsonSha256 = @"MetadataJsonSha256";
			 public static string MetadataHtml = @"MetadataHtml";
			 public static string MetadataUrl = @"MetadataUrl";
			 public static string ObjectStoreUrl = @"ObjectStoreUrl";
			 public static string QueryUrl = @"QueryUrl";
			 public static string ODPMetadataID = @"ODPMetadataID";
			 public static string ODPMetadataNeedsUpdate = @"ODPMetadataNeedsUpdate";
			 public static string ODPMetadataIsValid = @"ODPMetadataIsValid";
			 public static string ODPMetadataErrors = @"ODPMetadataErrors";
			 public static string Title = @"Title";
			 public static string CitationHtml = @"CitationHtml";
			 public static string Description = @"Description";
			 public static string DescriptionHtml = @"DescriptionHtml";
			 public static string Citation = @"Citation";
			 public static string ODPMetadataIsPublished = @"ODPMetadataIsPublished";
			 public static string ODPMetadataPublishErrors = @"ODPMetadataPublishErrors";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
